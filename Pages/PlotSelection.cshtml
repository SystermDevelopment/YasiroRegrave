@page
@model Login_Page.Pages.PlotSelectionModel
@{
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>

        /* タイトルのスタイル */
        #title {
            font-size: 48px;
            font-weight: bold;
            color: brown;
            text-align: center;
            margin-bottom: 24px;
        }

        /* 画像とオーバーレイのスタイル */
        #plotImage {
            position: absolute;
            top: 0;
            left: 0;
            z-index: -1; /* 画像を背面に配置 */
        }

        #canvasContainer {
            position: relative;
        }

    </style>
</head>
<body>

    <div id="title">区画選択画面</div>

    <div id="canvasContainer">
        <!-- canvas要素 -->
        <canvas id="plotCanvas" width="1416" height="733"></canvas>

        <!-- 画像 -->
        <img src="images/kukaku.png" alt="区画" id="plotImage" />
    </div>

    <script>
        // 座標データを定義
        const trapezoidCoordinates = [
            [786, 274, 787, 341, 874, 341, 818, 274, "日蓮D区"],
            [592, 135, 666, 135, 666, 262, 592, 262, "親鸞E区"],
            [413, 349, 586, 349, 586, 401, 413, 401, "釈尊D区"],
            [592, 350, 767, 350, 767, 402, 592, 402, "親鸞C区"],
            [403, 500, 494, 500, 494, 563, 403, 563, "釈尊A区"],
            [403, 415, 585, 415, 585, 499, 403, 499, "釈尊C区"],
            [781, 420, 966, 420, 966, 482, 781, 482, "日蓮C区"],
            [602, 416, 773, 416, 773, 484, 602, 484, "親鸞C区"],
            [780, 483, 965, 483, 965, 549, 780, 549, "日蓮B区"],
            [602, 485, 773, 485, 773, 549, 602, 549, "親鸞B区"],
            [495, 500, 584, 500, 584, 563, 495, 563, "釈尊特A区"],
            [381, 97, 401, 97, 401, 499, 381, 499, "釈尊新区"],
            [791, 346, 791, 403, 940, 402, 884, 347, "日蓮C区"]
        ];

        // canvas要素を取得
        const canvas = document.getElementById('plotCanvas');
        const ctx = canvas.getContext('2d');

        // 台形を描画する関数
        function drawTrapezoid(x1, y1, x2, y2, x3, y3, x4, y4, id) {
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.lineTo(x3, y3);
            ctx.lineTo(x4, y4);
            ctx.closePath();
            ctx.fillStyle = 'rgb(255, 233, 7)'; // 塗りつぶしの色を設定
            ctx.fill();
            ctx.stroke();

            // IDを描画
            const centerX = (x1 + x2 + x3 + x4) / 4; // 図形の中心のX座標
            const centerY = (y1 + y2 + y3 + y4) / 4; // 図形の中心のY座標
            const maxWidth = Math.max(x2 - x1, x3 - x4); // 図形の最大幅
            const lineHeight = 20; // ラインの高さを設定

            // テキストを描画する関数
            function drawText(text, x, y) {
                let line = '';
                let currentWidth = 0;
                const maxWidth = Math.max(x2 - x1, x3 - x4); // 台形の最大幅

                // テキストが台形の範囲内に収まる場合のみ描画
                if (ctx.measureText(text).width <= maxWidth) {
                    ctx.fillText(text, x, y);
                    return;
                }

                for (let i = 0; i < text.length; i++) {
                    const charWidth = ctx.measureText(text[i]).width;
                    if (currentWidth + charWidth > maxWidth && i > 0) {
                        ctx.fillText(line, x, y);
                        line = text[i];
                        y += lineHeight;
                        currentWidth = charWidth;
                    } else {
                        line += text[i];
                        currentWidth += charWidth;
                    }
                }
                ctx.fillText(line, x, y);
            }

            ctx.font = 'bold 14px Arial'; // フォントを設定
            ctx.fillStyle = 'black'; // テキストの色を設定
            ctx.textAlign = 'center'; // テキストを中央揃えに設定
            drawText(id, centerX, centerY); // テキストを描画
        }
            // マウスがクリックされたときの処理
        canvas.addEventListener('click', function (event) {
            // クリックされた座標を取得
            const clickX = event.clientX - canvas.getBoundingClientRect().left;
            const clickY = event.clientY - canvas.getBoundingClientRect().top;

            // 台形の範囲内にクリックされたかどうかを判定
            trapezoidCoordinates.forEach(coord => {
                const [x1, y1, x2, y2, x3, y3, x4, y4, id] = coord;
                // 台形の内側にクリックされたかどうかを判定する関数
                const isInside = pointInTrapezoid(clickX, clickY, x1, y1, x2, y2, x3, y3, x4, y4);
                if (isInside) {
                    // クリックされた図形に応じて遷移先のURLを設定
                    let reservationPageUrl = "";
                    switch (id) {
                        case "日蓮D区":
                            reservationPageUrl = "reservation_d.html";
                            break;
                        case "日蓮C区":
                            reservationPageUrl = "reservation_c.html";
                            break;
                        case "親鸞E区":
                            reservationPageUrl = "reservation_e.html";
                            break;

                        case "釈尊D区":
                            reservationPageUrl = "reservation_d.html";
                            break;
                        case "親鸞C区":
                            reservationPageUrl = "reservation_c.html";
                            break;

                        case "釈尊A区":
                            reservationPageUrl = "reservation_a.html";
                            break;

                        case "釈尊C区":
                            reservationPageUrl = "reservation_c.html";
                            break;

                        case "日蓮B区":
                            reservationPageUrl = "reservation_b.html";
                            break;

                        case "親鸞B区":
                            reservationPageUrl = "reservation_b.html";
                            break;

                        case "釈尊特A区":
                            reservationPageUrl = "reservation_special_a.html";
                            break;

                        case "釈尊新区":
                            reservationPageUrl = "reservation_new.html";
                            break;
                    }
                    // 遷移先のURLが設定されている場合、予約ページに遷移する
                    if (reservationPageUrl !== "") {
                        window.location.href = reservationPageUrl;
                    }
                }
            });
        });

        // 台形を描画
        trapezoidCoordinates.forEach(coord => {
            const [x1, y1, x2, y2, x3, y3, x4, y4, id] = coord;
            drawTrapezoid(x1, y1, x2, y2, x3, y3, x4, y4, id);
        });

        // 台形の内側にクリックされたかどうかを判定する関数
        function pointInTrapezoid(x, y, x1, y1, x2, y2, x3, y3, x4, y4) {
            const AB = (x - x1) * (y2 - y1) - (y - y1) * (x2 - x1);
            const BC = (x - x2) * (y3 - y2) - (y - y2) * (x3 - x2);
            const CD = (x - x3) * (y4 - y3) - (y - y3) * (x4 - x3);
            const DA = (x - x4) * (y1 - y4) - (y - y4) * (x1 - x4);
            return (AB >= 0 && BC >= 0 && CD >= 0 && DA >= 0) || (AB <= 0 && BC <= 0 && CD <= 0 && DA <= 0);
        }

        // Canvas内のマウス移動イベントリスナーを追加
        canvas.addEventListener('mousemove', function (event) {
            const mouseX = event.clientX - canvas.getBoundingClientRect().left;
            const mouseY = event.clientY - canvas.getBoundingClientRect().top;

            // Canvasをクリアして描画を更新
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // マウスの位置に応じて、選択された図形に赤い枠を表示する
            trapezoidCoordinates.forEach(coord => {
                const [x1, y1, x2, y2, x3, y3, x4, y4, id] = coord;
                drawTrapezoid(x1, y1, x2, y2, x3, y3, x4, y4, id);
                // マウスの位置に応じて選択された図形に赤い枠を表示する
                if (pointInTrapezoid(mouseX, mouseY, x1, y1, x2, y2, x3, y3, x4, y4)) {
                    ctx.strokeStyle = 'red';
                    drawTrapezoid(x1, y1, x2, y2, x3, y3, x4, y4, id);
                    ctx.strokeStyle = 'black'; // 赤い枠を描画した後は黒に戻す
                }
            });
        });

        // マウスがCanvasから外れた場合、外枠の色を透明にする
        canvas.addEventListener('mouseleave', function () {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            // Canvasをクリアして描画を更新
            trapezoidCoordinates.forEach(coord => {
                const [x1, y1, x2, y2, x3, y3, x4, y4, id] = coord;
                drawTrapezoid(x1, y1, x2, y2, x3, y3, x4, y4, id);
            });
        });

    </script>
</body>
</html>
